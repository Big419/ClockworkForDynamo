<Workspace Version="1.3.4.6666" X="593" Y="254" zoom="1" ScaleFactor="1" Name="ParameterFilterElement.FilterRuleString" Description="Aggregates the filter rules of a given ParameterFilterElement into a human-readable string" ID="d8678bcb-4e45-44a4-af59-ccd8d92518c1" Category="Clockwork.Revit.Elements.ParameterFilterElement.Query">
  <NamespaceResolutionMap>
    <ClassMap partialName="ParameterFilterElement" resolvedName="Revit.Filter.ParameterFilterElement" assemblyName="RevitNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <PythonNodeModels.PythonNode guid="452c5f22-012d-4823-9833-da816a48d186" type="PythonNodeModels.PythonNode" nickname="Python Script" x="499.12318127988" y="24.9592710511706" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>import clr
import System
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

bips = {}
for bip in System.Enum.GetValues(BuiltInParameter):
	try: bips[ElementId(bip).IntegerValue] = LabelUtils.GetLabelFor(bip)
	except: pass

def GetFilterRuleStringWrapper(item):
	if version &gt; 2018 and hasattr(item, "GetElementFilter"): 
		return GetFilterRuleStringNew(item.GetElementFilter(), item.Document)		
	elif version &lt; 2019 and hasattr(item, "GetRules"): 
		return GetFilterRuleStringOld(item)	
	else: return None
		
def GetFilterRuleStringOld(filter):
	rulestrings = []
	sep = " AND "
	doc = filter.Document
	if hasattr(filter, "GetRules"):
		for rule in filter.GetRules():
			# inverted rules
				ruleInverted = ""
				if hasattr(rule, "GetInnerRule"): 
					rule = rule.GetInnerRule()
					ruleInverted = "Not"
				# rule parameters
				paramId = filter.GetRuleParameter(rule)
				thisparam = doc.GetElement(paramId)
				if thisparam: thisparam = thisparam.Name
				else: thisparam = bips[paramId.IntegerValue]
				# rule evaluators
				if hasattr(rule, "GetEvaluator"):
					thiseval = rule.GetEvaluator().ToString().replace("Autodesk.Revit.DB.Filter","")
					thiseval = thiseval.replace("Numeric","")
					thiseval = thiseval.replace("String","")
					thiseval = thiseval + ruleInverted
					if thiseval == "Equals": thiseval = "=="
					elif thiseval == "EqualsNot": thiseval = "!="
					elif thiseval == "Greater": thiseval = "&gt;"
					elif thiseval == "GreaterOrEqual": thiseval = "&gt;="
					elif thiseval == "Less": thiseval = "&lt;"
					elif thiseval == "LessOrEqual": thiseval = "&lt;="
				elif hasattr(rule, "ParameterName"): thiseval = "Exists"
				else: thiseval = ""
				# rule values
				if hasattr(rule, "RuleString"): thisval = rule.RuleString
				elif hasattr(rule, "RuleValue"): thisval = rule.RuleValue.ToString()
				else: thisval = ""
				rulestrings.append((thisparam + " " + thiseval + " " + thisval).strip())
	if len(rulestrings) &gt; 0:
		rulestrings.sort()
		return sep.join(rulestrings)
	else: return '&lt;&lt;&lt;No rules defined&gt;&gt;&gt;'
		
def GetFilterRuleStringNew(efilter, doc):
	rulestrings = []
	# Filters without rules will arrive as nulls:
	if not efilter: return '&lt;&lt;&lt;No rules defined&gt;&gt;&gt;'
	efilterstr = efilter.ToString()		
	if "And" in efilterstr: sep = " AND "
	elif "Or" in efilterstr: sep = " OR "
	else: sep = ""
	filters = efilter.GetFilters()
	for filter in filters:
		if hasattr(filter, "GetRules"):
			for rule in filter.GetRules():
				# inverted rules
				ruleInverted = ""
				if hasattr(rule, "GetInnerRule"): 
					rule = rule.GetInnerRule()
					ruleInverted = "Not"
				# rule parameters
				paramId = rule.GetRuleParameter()
				thisparam = doc.GetElement(paramId)
				if thisparam: thisparam = thisparam.Name
				else: thisparam = bips[paramId.IntegerValue]
				# rule evaluators
				if hasattr(rule, "GetEvaluator"):
					thiseval = rule.GetEvaluator().ToString().replace("Autodesk.Revit.DB.Filter","")
					thiseval = thiseval.replace("Numeric","")
					thiseval = thiseval.replace("String","")
					thiseval = thiseval + ruleInverted
					if thiseval == "Equals": thiseval = "=="
					elif thiseval == "EqualsNot": thiseval = "!="
					elif thiseval == "Greater": thiseval = "&gt;"
					elif thiseval == "GreaterOrEqual": thiseval = "&gt;="
					elif thiseval == "Less": thiseval = "&lt;"
					elif thiseval == "LessOrEqual": thiseval = "&lt;="
				elif hasattr(rule, "ParameterName"): thiseval = "Exists"
				else: thiseval = ""
				# rule values
				if hasattr(rule, "RuleString"): thisval = rule.RuleString
				elif hasattr(rule, "RuleValue"): thisval = rule.RuleValue.ToString()
				else: thisval = ""
				rulestrings.append((thisparam + " " + thiseval + " " + thisval).strip())
		else: rulestrings.append("(" + GetFilterRuleStringNew(filter, doc)+ ")")
	rulestrings.sort()
	return sep.join(rulestrings)
		
items = UnwrapElement(IN[0])
version = IN[1]

if isinstance(IN[0], list): OUT = [GetFilterRuleStringWrapper(x) for x in items]
else: OUT = GetFilterRuleStringWrapper(items)</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="0745c91b-df42-4e7f-a09a-a5aeb6b1c548" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="Application.Version" x="-59.8768187201199" y="66.9592710511707" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <ID value="3df0961d-9d46-464f-9175-0a74eeb61bc1" />
      <Name value="Application.Version" />
      <Description value="Retrieves the name, version and build of the current Revit application." />
      <Inputs />
      <Outputs>
        <Output value="Name" />
        <Output value="Version" />
        <Output value="Build" />
        <Output value="Language" />
        <Output value="fullVersion" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="5edee556-dbc9-4957-9a88-b4d8b527efb8" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-59.8768187201199" y="-17.0407289488294" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="parameterFilterElement: ParameterFilterElement[]..[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="4ac7848f-6925-4375-b85a-e5c0f3491cc6" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="723.12318127988" y="24.9592710511706" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="str" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="452c5f22-012d-4823-9833-da816a48d186" start_index="0" end="4ac7848f-6925-4375-b85a-e5c0f3491cc6" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0745c91b-df42-4e7f-a09a-a5aeb6b1c548" start_index="1" end="452c5f22-012d-4823-9833-da816a48d186" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="5edee556-dbc9-4957-9a88-b4d8b527efb8" start_index="0" end="452c5f22-012d-4823-9833-da816a48d186" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>