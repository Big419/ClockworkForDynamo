<Workspace Version="1.3.4.6666" X="279.999203582438" Y="228.199941080411" zoom="1.00501799482924" ScaleFactor="1" Name="All Elements of Type+" Description="Gets all placed elements of a given element type in the model. Unlike the OOTB node, it works for virtually all element types." ID="c19b9768-4da1-4591-bde5-73c07bbfbe6c" Category="Clockwork.Revit.Selection.ByCollector">
  <NamespaceResolutionMap>
    <ClassMap partialName="List" resolvedName="DSCore.List" assemblyName="DSCoreNodes.dll" />
    <ClassMap partialName="Category" resolvedName="Revit.Elements.Category" assemblyName="RevitNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="7051506d-0987-4906-8b5b-68f643bb6941" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="171.369278068583" y="61.0177681360315" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="elementType: var[]..[]" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="27647f3a-c7d7-48fa-bf00-8adabac27375" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="913.369278068583" y="118.017768136031" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="86e66cba-645b-41a1-95de-0dd4a0c548c9" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="171.369278068583" y="144.017768136031" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="toggle : bool = true" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="5445afc6-1f3c-4d71-8248-25ab27252a13" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="171.369278068583" y="227.017768136032" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="// Use only if you want to query a linked model&#xD;&#xA;docOrRevitLinkInstance : var = null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <PythonNodeModels.PythonNode guid="6f90ee4b-4ecc-4eaa-9b45-11d83eec8b01" type="PythonNodeModels.PythonNode" nickname="Python Script" x="689.369278068583" y="118.017768136031" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>import System
import clr
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager

def ElementsByType(etype, doc):
	# Special cases where we need to pull FamilyInstances first and then check against the desired type
	if str(etype) in ("Autodesk.Revit.DB.AnnotationSymbol", "Autodesk.Revit.DB.Mullion", "Autodesk.Revit.DB.Panel"):
		collector = FilteredElementCollector(doc).OfClass(Autodesk.Revit.DB.FamilyInstance)
		return [x for x in collector.ToElements() if x.GetType() == etype]
	# Special cases where we need to pull FamilySymbols first and then check against the desired type
	elif str(etype) in ("Autodesk.Revit.DB.AnnotationSymbolType", "Autodesk.Revit.DB.AreaTagType", "Autodesk.Revit.DB.Architecture.RoomTagType", "Autodesk.Revit.DB.Mechanical.SpaceTagType", "Autodesk.Revit.DB.Structure.TrussType"):
		collector = FilteredElementCollector(doc).OfClass(Autodesk.Revit.DB.FamilySymbol)
		return [x for x in collector.ToElements() if x.GetType() == etype]
	# Special cases where we need to pull SpatialElements first and then check against the desired type
	elif str(etype) in ("Autodesk.Revit.DB.Area", "Autodesk.Revit.DB.Architecture.Room", "Autodesk.Revit.DB.Mechanical.Space"):
		collector = FilteredElementCollector(doc).OfClass(Autodesk.Revit.DB.SpatialElement)
		return [x for x in collector.ToElements() if x.GetType() == etype]
	# Special cases where we need to pull SpatialElementTags first and then check against the desired type
	elif str(etype) in ("Autodesk.Revit.DB.AreaTag", "Autodesk.Revit.DB.Architecture.RoomTag", "Autodesk.Revit.DB.Mechanical.SpaceTag"):
		collector = FilteredElementCollector(doc).OfClass(Autodesk.Revit.DB.SpatialElementTag)
		return [x for x in collector.ToElements() if x.GetType() == etype]
	# Special cases where we need to pull CurveElements first and then check against the desired type
	elif str(etype) in ("Autodesk.Revit.DB.Structure.AreaReinforcementCurve", "Autodesk.Revit.DB.CurveByPoints", "Autodesk.Revit.DB.DetailArc", "Autodesk.Revit.DB.DetailCurve", "Autodesk.Revit.DB.DetailEllipse", "Autodesk.Revit.DB.DetailLine", "Autodesk.Revit.DB.DetailNurbSpline", "Autodesk.Revit.DB.ModelArc", "Autodesk.Revit.DB.ModelCurve", "Autodesk.Revit.DB.ModelEllipse", "Autodesk.Revit.DB.ModelHermiteSpline", "Autodesk.Revit.DB.ModelLine", "Autodesk.Revit.DB.ModelNurbSpline", "Autodesk.Revit.DB.SymbolicCurve"):
		collector = FilteredElementCollector(doc).OfClass(Autodesk.Revit.DB.CurveElement)
		return [x for x in collector.ToElements() if x.GetType() == etype]
	# Special cases where we need to pull HostedSweep first and then check against the desired type
	if str(etype) in ("Autodesk.Revit.DB.Architecture.Fascia", "Autodesk.Revit.DB.Architecture.Gutter", "Autodesk.Revit.DB.SlabEdge"):
		collector = FilteredElementCollector(doc).OfClass(Autodesk.Revit.DB.HostedSweep)
		return [x for x in collector.ToElements() if x.GetType() == etype]
	else:
		try:
			collector = FilteredElementCollector(doc).OfClass(etype)
			return collector.ToElements()
		except: return None

inputdoc = UnwrapElement(IN[2])
if not inputdoc: doc = DocumentManager.Instance.CurrentDBDocument
elif inputdoc.GetType().ToString() == "Autodesk.Revit.DB.RevitLinkInstance": doc = inputdoc.GetLinkDocument()
elif inputdoc.GetType().ToString() == "Autodesk.Revit.DB.Document": doc = inputdoc
else: doc = DocumentManager.Instance.CurrentDBDocument

if isinstance(IN[0], list): OUT = [ElementsByType(x, doc) for x in IN[0]]
else: OUT = ElementsByType(IN[0], doc)</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="7051506d-0987-4906-8b5b-68f643bb6941" start_index="0" end="6f90ee4b-4ecc-4eaa-9b45-11d83eec8b01" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="86e66cba-645b-41a1-95de-0dd4a0c548c9" start_index="0" end="6f90ee4b-4ecc-4eaa-9b45-11d83eec8b01" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="5445afc6-1f3c-4d71-8248-25ab27252a13" start_index="0" end="6f90ee4b-4ecc-4eaa-9b45-11d83eec8b01" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="6f90ee4b-4ecc-4eaa-9b45-11d83eec8b01" start_index="0" end="27647f3a-c7d7-48fa-bf00-8adabac27375" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>